return {}
-- return {
-- 	"neovim/nvim-lspconfig",
-- 	dependencies = {
-- 		-- Automatically install LSPs and related tools to stdpath for Neovim
-- 		-- Mason must be loaded before its dependents so we need to set it up here.
-- 		{ "mason-org/mason.nvim", opts = {} },
-- 		"mason-org/mason-lspconfig.nvim",
-- 		"WhoIsSethDaniel/mason-tool-installer.nvim",
-- 		"microsoft/python-type-stubs",
-- 		{ "j-hui/fidget.nvim", opts = {} },
--
-- 		"saghen/blink.cmp",
-- 	},
-- 	config = function()
-- 		vim.api.nvim_create_autocmd("LspAttach", {
-- 			group = vim.api.nvim_create_augroup("oathlesss-lsp-attach", { clear = true }),
-- 			callback = function(event)
-- 				-- a function that lets us more easily define mappings specific
-- 				-- for LSP related items. It sets the mode, buffer and description for us each time.
-- 				local map = function(keys, func, desc, mode)
-- 					mode = mode or "n"
-- 					vim.keymap.set(mode, keys, func, { buffer = event.buf, desc = "LSP: " .. desc })
-- 				end
--
-- 				-- NOTE: These mappings are also defined in Snacks.
-- 				-- map('grn', vim.lsp.buf.rename, 'Rename')
-- 				-- map('gra', vim.lsp.buf.code_action, 'Goto Code Action', { 'n', 'x' })
-- 				-- map('grr', require('telescope.builtin').lsp_references, 'Goto References')
-- 				-- map('gri', require('telescope.builtin').lsp_implementations, 'Goto Implementation')
-- 				-- --  To jump back, press <C-t>.
-- 				-- map('gd', require('telescope.builtin').lsp_definitions, 'Goto Definition')
-- 				-- -- WARN: This is not Goto Definition, this is Goto Declaration.
-- 				-- map('gD', vim.lsp.buf.declaration, 'Goto Declaration')
-- 				-- map('gO', require('telescope.builtin').lsp_document_symbols, 'Open Document Symbols')
-- 				-- map('gW', require('telescope.builtin').lsp_dynamic_workspace_symbols, 'Open Workspace Symbols')
-- 				-- map('grt', require('telescope.builtin').lsp_type_definitions, 'Goto Type Definition')
--
-- 				-- This function resolves a difference between neovim nightly (version 0.11) and stable (version 0.10)
-- 				---@param client vim.lsp.Client
-- 				---@param method vim.lsp.protocol.Method
-- 				---@param bufnr? integer some lsp support methods only in specific files
-- 				---@return boolean
-- 				local function client_supports_method(client, method, bufnr)
-- 					if vim.fn.has("nvim-0.11") == 1 then
-- 						return client:supports_method(method, bufnr)
-- 					else
-- 						return client.supports_method(method, { bufnr = bufnr })
-- 					end
-- 				end
--
-- 				-- The following two autocommands are used to highlight references of the
-- 				-- word under your cursor when your cursor rests there for a little while.
-- 				--    See `:help CursorHold` for information about when this is executed
-- 				--
-- 				-- When you move your cursor, the highlights will be cleared (the second autocommand).
-- 				local client = vim.lsp.get_client_by_id(event.data.client_id)
-- 				if
-- 					client
-- 					and client_supports_method(
-- 						client,
-- 						vim.lsp.protocol.Methods.textDocument_documentHighlight,
-- 						event.buf
-- 					)
-- 				then
-- 					local highlight_augroup = vim.api.nvim_create_augroup("oathlesss-lsp-highlight", { clear = false })
-- 					vim.api.nvim_create_autocmd({ "CursorHold", "CursorHoldI" }, {
-- 						buffer = event.buf,
-- 						group = highlight_augroup,
-- 						callback = vim.lsp.buf.document_highlight,
-- 					})
--
-- 					vim.api.nvim_create_autocmd({ "CursorMoved", "CursorMovedI" }, {
-- 						buffer = event.buf,
-- 						group = highlight_augroup,
-- 						callback = vim.lsp.buf.clear_references,
-- 					})
--
-- 					vim.api.nvim_create_autocmd("LspDetach", {
-- 						group = vim.api.nvim_create_augroup("oathlesss-lsp-detach", { clear = true }),
-- 						callback = function(event2)
-- 							vim.lsp.buf.clear_references()
-- 							vim.api.nvim_clear_autocmds({ group = "oathlesss-lsp-highlight", buffer = event2.buf })
-- 						end,
-- 					})
-- 				end
--
-- 				-- The following code creates a keymap to toggle inlay hints in your
-- 				-- code, if the language server you are using supports them
-- 				--
-- 				-- This may be unwanted, since they displace some of your code
-- 				if
-- 					client
-- 					and client_supports_method(client, vim.lsp.protocol.Methods.textDocument_inlayHint, event.buf)
-- 				then
-- 					map("<leader>th", function()
-- 						vim.lsp.inlay_hint.enable(not vim.lsp.inlay_hint.is_enabled({ bufnr = event.buf }))
-- 					end, "Toggle Inlay Hints")
-- 				end
-- 			end,
-- 		})
--
-- 		-- See :help vim.diagnostic.Opts
-- 		vim.diagnostic.config({
-- 			severity_sort = true,
-- 			float = { border = "rounded", source = "if_many" },
-- 			underline = { severity = vim.diagnostic.severity.ERROR },
-- 			signs = vim.g.have_nerd_font and {
-- 				text = {
-- 					[vim.diagnostic.severity.ERROR] = "󰅚 ",
-- 					[vim.diagnostic.severity.WARN] = "󰀪 ",
-- 					[vim.diagnostic.severity.INFO] = "󰋽 ",
-- 					[vim.diagnostic.severity.HINT] = "󰌶 ",
-- 				},
-- 			} or {},
-- 			virtual_text = {
-- 				source = "if_many",
-- 				spacing = 2,
-- 				format = function(diagnostic)
-- 					local diagnostic_message = {
-- 						[vim.diagnostic.severity.ERROR] = diagnostic.message,
-- 						[vim.diagnostic.severity.WARN] = diagnostic.message,
-- 						[vim.diagnostic.severity.INFO] = diagnostic.message,
-- 						[vim.diagnostic.severity.HINT] = diagnostic.message,
-- 					}
-- 					return diagnostic_message[diagnostic.severity]
-- 				end,
-- 			},
-- 		})
--
-- 		vim.api.nvim_create_autocmd("LspAttach", {
-- 			group = vim.api.nvim_create_augroup("lsp_attach_disable_ruff_hover", { clear = true }),
-- 			callback = function(args)
-- 				local client = vim.lsp.get_client_by_id(args.data.client_id)
-- 				if client == nil then
-- 					return
-- 				end
-- 				if client.name == "ruff" then
-- 					-- Disable hover in favor of Pyright
-- 					client.server_capabilities.hoverProvider = false
-- 				end
-- 			end,
-- 			desc = "LSP: Disable hover capability from Ruff",
-- 		})
--
-- 		local capabilities = require("blink.cmp").get_lsp_capabilities()
--
-- 		-- Enable the following language servers
-- 		--  Feel free to add/remove any LSPs that you want here. They will automatically be installed.
-- 		--
-- 		--  Add any additional override configuration in the following tables. Available keys are:
-- 		--  - cmd (table): Override the default command used to start the server
-- 		--  - filetypes (table): Override the default list of associated filetypes for the server
-- 		--  - capabilities (table): Override fields in capabilities. Can be used to disable certain LSP features.
-- 		--  - settings (table): Override the default settings passed when initializing the server.
-- 		--        For example, to see the options for `lua_ls`, you could go to: https://luals.github.io/wiki/settings/
-- 		local servers = {
-- 			-- INFO: :help lspconfig-all for a list of all the pre-configured LSPs
-- 			basedpyright = {
-- 				settings = {
-- 					basedpyright = {
-- 						analysis = {
-- 							stubPath = vim.fs.joinpath(vim.fn.stdpath("data"), "lazy", "python-type-stubs"),
-- 							typeCheckingMode = "off",
-- 							-- ignore = { "reportUnreachable" },
-- 							disableOrganizeImports = true,
-- 							useTypingExtensions = true,
-- 							diagnosticMode = "openFilesOnly",
-- 						},
-- 					},
-- 				},
-- 			},
-- 			ruff = {},
-- 			-- gopls = {},
-- 			-- rust_analyzer = {},
-- 			ts_ls = {},
-- 			lua_ls = {
-- 				-- cmd = { ... },
-- 				-- filetypes = { ... },
-- 				-- capabilities = {},
-- 				settings = {
-- 					Lua = {
-- 						completion = {
-- 							callSnippet = "Replace",
-- 						},
-- 						diagnostics = { disable = { "missing-fields" } },
-- 					},
-- 				},
-- 			},
-- 		}
--
-- 		local ensure_installed = vim.tbl_keys(servers or {})
-- 		vim.list_extend(ensure_installed, {
-- 			"stylua",
-- 		})
-- 		require("mason-tool-installer").setup({ ensure_installed = ensure_installed })
--
-- 		require("mason-lspconfig").setup({
-- 			ensure_installed = {},
-- 			automatic_installation = false,
-- 			handlers = {
-- 				function(server_name)
-- 					local server = servers[server_name] or {}
-- 					server.capabilities = vim.tbl_deep_extend("force", {}, capabilities, server.capabilities or {})
-- 					require("lspconfig")[server_name].setup(server)
-- 				end,
-- 			},
-- 		})
-- 	end,
-- }
